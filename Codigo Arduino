#include <LiquidCrystal.h>
//Pines, Pulsadores
int analogPin = 0;
int leerDatos = 13;
int mostrarDatos = 8;
int estadoAC1 = 0;  // Estado para capturar datos
int estadoAC2 = 0;  // Estado para mostrar datos

//Lecturas
int val = 0;
int cantidadVal = 0;
short int crucesCero=0;
int capacidad = 180;

//Informacion de la señal
bool Cuadrada = false;
bool Senoidal = false;
bool Triangular = false;


float amplitudAnterior = 0;
float frecuenciaAnterior = 0;
float frecuenciaActual = 0;
float periodo = 0;

//arreglos 
short unsigned int contadores[4] = {0,0,0,0};
int* arregloVal = new int[capacidad];

//Variables para medir tiempos
unsigned int tiempo_actual;
unsigned int tiempo1 = 0;
unsigned int tiempo2 = 0;

LiquidCrystal lcd_1(12, 11, 5, 4, 3, 2);

void setup() {
  lcd_1.begin(16, 2);
  lcd_1.print("Iniciando...");
  Serial.begin(9600);
  pinMode(leerDatos, INPUT);
  pinMode(mostrarDatos, INPUT);
  delay(2000);
  lcd_1.clear();
  
}

void loop() {
  // Leer el estado del pulsador de capturar datos
  if (digitalRead(leerDatos) == HIGH) {
    estadoAC1 = 1;  // Activar el estado de captura
    estadoAC2 = 0;  // Desactivar el estado de mostrar datos
  }

  // Si está en estado de captura de datos
  if (estadoAC1 == 1) {
    lcd_1.home();
    lcd_1.print("Capturando Datos");

    // Capturar datos, verificar que no se salga del límite de capacidad
    if (cantidadVal < capacidad) {
      tiempo_actual = millis();
      val = analogRead(analogPin);
      Serial.println(val);
      arregloVal[cantidadVal] = val;
      
      if(cantidadVal!=0){
        if(arregloVal[cantidadVal-1]<0 and arregloVal[cantidadVal]>=0){
        	crucesCero++;
          	if(crucesCero==1){
          		tiempo1 = tiempo_actual;
          	}
          	else if(crucesCero==2){
          		tiempo2 = tiempo_actual;
              	periodo = (tiempo2-tiempo1)/1000.0;
              	frecuenciaActual = 1/periodo;
          	}
        }
      }	
      cantidadVal++;
    } 
    
    if(crucesCero==2){ 
      crucesCero = 0; //Se resetea el contador crucesCero
      
      float amplitudActual = medirAmplitud(arregloVal, cantidadVal);
      
      Cuadrada = senalCuadrada(arregloVal, cantidadVal);
      Triangular = senalTriangular(arregloVal, cantidadVal,amplitudActual,frecuenciaActual);      
      Senoidal = senalSenoidal(arregloVal, cantidadVal,amplitudActual,frecuenciaActual);    
      
      indetificarCoincidencias(frecuenciaActual,frecuenciaAnterior,amplitudActual,amplitudAnterior,contadores,Cuadrada,Senoidal,Triangular);

      // Guardar los datos actuales como los anteriores para la siguiente comparación
      amplitudAnterior = amplitudActual;
      frecuenciaAnterior = frecuenciaActual;
      //Reiniciar variables y arreglo para nueva toma de datos
      Reseteo(arregloVal,capacidad,cantidadVal,tiempo_actual);
    }
  }

  // Verificar si se presiona el pulsador para mostrar datos
  if (digitalRead(mostrarDatos) == HIGH) {
    estadoAC1 = 0;  // Desactivar el estado de captura
    estadoAC2 = 1;  // Activar el estado de mostrar datos
    lcd_1.clear();
  }

  // Si está en estado de mostrar datos
  if (estadoAC2 == 1) {
    lcd_1.setCursor(0, 0);
    lcd_1.print("Tipo de senal");
    lcd_1.setCursor(0, 1);
   
    int indice = indiceMax(contadores,4);
      
    if (indice==0) {
      lcd_1.print("Cuadrada");
    } else if (indice == 1) {
      lcd_1.print("Senoidal");
    } else if (indice == 2) {
      lcd_1.print("Triangular");
    } else if(indice==3) {
      lcd_1.print("Desconocida");
    }
    delay(5000);
    lcd_1.clear();

    // Mostrar frecuencia y amplitud
    if(indice == 0 or indice == 1 or indice == 2){
    	lcd_1.setCursor(0, 0);
    	lcd_1.print("Freq: ");
    	lcd_1.print(frecuenciaAnterior);
    	lcd_1.print(" Hz");
    	lcd_1.setCursor(0, 1);
    	lcd_1.print("Amp: ");
    	lcd_1.print(amplitudAnterior);
    	lcd_1.print(" V");
    	delay(5000);
    	lcd_1.clear();
    }

    Reseteo(arregloVal,capacidad,cantidadVal,tiempo_actual);
    // Reiniciar el arreglo de contadores
    for (int k = 0; k < 4; k++) {
        contadores[k] = 0;
    }
    
    estadoAC1 = 1;  // Continuar tomando datos
    estadoAC2 = 0;  // Reiniciar el estado de mostrar
  }
}

// Función para detectar si la señal es cuadrada
bool senalCuadrada(int* arr, int size) {
  int numerosUnicos = 0;
  int unicos[4];

  for (int i = 0; i < size; i++) {
    int j = 0;
    for (j = 0; j < numerosUnicos; j++) {
      if (arr[i] == unicos[j]) {
        j = numerosUnicos;
      }
    }
    if (j == numerosUnicos) {
      unicos[numerosUnicos++] = arr[i];
      if (numerosUnicos > 4) {
        return false;
      }
    }
  }
  return true;
}


// Función para medir la amplitud
float medirAmplitud(int* arr, int size) {
  int valorMaximo = 0;

  for (int i = 0; i < size; i++) {
    if (arr[i] > valorMaximo) {
      valorMaximo = arr[i];
    }
   	
  }

  float amplitud = valorMaximo/100.0;  // Convertir a voltios
  return amplitud;
}

//Funcion que verifica si es senoidal a altas frecuencias
bool senalSenoidal(int *arr,int size,float amplitud,float frecuencia){
  float cambio=0,promCambios=0,totalCambios=0;
  float valorMax = 0;

  valorMax = amplitud*100.0;

  for(int i=0;i<size;i++){
	if(arr[i]>=valorMax-2 and arr[i]<=valorMax+2 and i>=2){
		for(int k=i-2;k<i+2;k++){
			cambio += abs(arr[k+1]-arr[k]);
			totalCambios++;
		}
      i+=2;
	}
  }
  promCambios = cambio/totalCambios;
  if(promCambios<2*frecuencia*amplitud){
  	return true;
  }
  return false;
}


//Funcion que verifica si es una señal triangular
bool senalTriangular(int *arr,int size,float amplitud,float frecuencia){
  float cambio=0,promCambios=0,totalCambios=0;
  float valorMax = 0;

  valorMax = amplitud*100.0;

  for(int i=0;i<size;i++){
	if(arr[i]>=valorMax-2 and arr[i]<=valorMax+2 and i>=2){
		for(int k=i-2;k<i+2;k++){
			cambio += abs(arr[k+1]-arr[k]);
			totalCambios++;
		}
      i+=2;
	}
  }
  promCambios = cambio/totalCambios;
  if(promCambios>2*frecuencia*amplitud){
  	return true;
  }
  return false;
}


int indiceMax(short unsigned int *arr, int size) {

    int valorMax = arr[0];
    int indiceMax = 0;
    int conteoMax = 0; 

    for (int i = 1; i < size; i++) {
        if (*(arr+i) > valorMax) {
            valorMax = *(arr+i);
            indiceMax = i;
            conteoMax = 1;  
        } else if (*(arr+i) == valorMax) {
            conteoMax++;  
        }
    }

    if (conteoMax > 1) {
        return 3;
    }

    return indiceMax;  
}

void indetificarCoincidencias(float frecuenciaActual,float frecuenciaAnterior,float amplitudActual,float amplitudAnterior,short unsigned int *contadores,bool Cuadrada,bool Senoidal,bool Triangulo){

      // Comparar con el arreglo anterior
      if (amplitudAnterior != 0) {
       	if(frecuenciaActual<=frecuenciaAnterior+frecuenciaAnterior*0.51 and frecuenciaActual>=frecuenciaAnterior-frecuenciaAnterior*0.51){
        	if(amplitudActual<=amplitudAnterior+amplitudAnterior*0.51 and amplitudActual>=amplitudAnterior-amplitudAnterior*0.51){
            	if (Cuadrada){
					contadores[0]++;
       			 }
        		else if (Senoidal){
					contadores[1]++;
        		}
        		else if (Triangular){
					contadores[2]++;
        		}
        		else{
          			contadores[3]++;
        		}
            }
          	else{
          		contadores[3]++;
          	}
              
        }
        else{
        	contadores[3]++;
        }
      
      }
}

void Reseteo(int*& arregloVal, int capacidad, int& cantidadVal,unsigned int& tiempo_actual) {
    // Limpiar el arreglo
    delete[] arregloVal;
    // Crear un nuevo arreglo vacío con la capacidad especificada
    arregloVal = new int[capacidad];
    // Reiniciar el índice para la nueva captura de datos
    cantidadVal = 0;
    // Reiniciar el tiempo actual
    tiempo_actual = millis();
}
